const profile=document.querySelector(".profile");let userId=null,year=null;function getUserId(){const e=document.querySelector(".current h1");null!==e&&(userId=e.dataset.id)}function getYear(){const e=document.querySelector(".yearHeader");null!==e&&(year=e.dataset.year)}function updateProfile(e){if(removeSpinnerIfPresent(),null!==e.logs||0!==e.events.length)null!==e.logs&&printLogs(e.logs),0!==e.events.length&&printEvents(e.events);else{const e=createNotification();profile.appendChild(e)}}function printLogs(e){const t=document.createElement("section");t.classList.add("table");const n=document.createElement("table"),d=document.createElement("thead"),a=document.createElement("tr"),o=document.createElement("th");o.classList.add("icon");const c=document.createElement("th");c.appendChild(document.createTextNode("Level")),c.classList.add("level");const s=document.createElement("th");s.appendChild(document.createTextNode("Experience"));const i=document.createElement("th");i.appendChild(document.createTextNode("Difference"));const r=document.createElement("tbody");profile.appendChild(t),t.appendChild(n),n.appendChild(d),a.appendChild(o),a.appendChild(c),a.appendChild(s),a.appendChild(i),d.appendChild(a),n.appendChild(r),e.forEach(function(e,t){const n=document.createElement("tr"),d=document.createElement("td"),a=document.createElement("span");a.classList.add("log-icon","s"+t),d.appendChild(a);const o=document.createElement("td");o.appendChild(document.createTextNode(e.lg_level));const c=document.createElement("td");c.appendChild(document.createTextNode(Math.round(e.lg_value).toLocaleString()));const s=document.createElement("td");e.difference>0?(s.appendChild(document.createTextNode("+"+Math.round(e.difference).toLocaleString())),s.classList.add("log-value","positive")):s.appendChild(document.createTextNode("0")),n.appendChild(d),n.appendChild(o),n.appendChild(c),n.appendChild(s),r.appendChild(n)})}function printEvents(e){const t=document.createElement("section");t.classList.add("events");const n=document.createElement("ul");n.classList.add("events"),profile.appendChild(t),t.appendChild(n),e.forEach(function(e,t){const d=document.createElement("li");d.classList.add("event-item");const a=document.createElement("div");a.classList.add("event-header");const o=document.createElement("h2");o.appendChild(document.createTextNode(e.ev_title)),o.classList.add("event-title");const c=document.createElement("span");c.appendChild(document.createTextNode(dayjs.unix(e.ev_ts).format("MMMM D, YYYY HH:mm"))),c.classList.add("event-timestamp");const s=document.createElement("p");s.appendChild(document.createTextNode(e.ev_details)),s.classList.add("event-details"),d.appendChild(a),a.appendChild(o),a.appendChild(c),d.appendChild(s),n.appendChild(d)})}function createNotification(){const e=document.createElement("div");e.classList.add("text","notification","inf");const t=document.createElement("h2");t.appendChild(document.createTextNode("Nothing interesting happened."));const n=document.createElement("p");return n.appendChild(document.createTextNode("Looks like we don't have any data for you on this day.")),e.appendChild(t),e.appendChild(n),e}const body=document.querySelector("body");let isNightmode=body.classList.contains("is-nightmode");const nightmodeToggle=document.querySelector(".night-mode-toggle");function toggleNightmodeOnClick(e){e.preventDefault(),isNightmode=!(isNightmode=body.classList.contains("is-nightmode")),body.classList.toggle("is-nightmode"),localStorage.setItem("nightmode",JSON.stringify(isNightmode))}function turnOnNightmodeOnPageLoad(){"true"===localStorage.getItem("nightmode")&&body.classList.toggle("is-nightmode")}let startDay,endDay;null!==nightmodeToggle&&nightmodeToggle.addEventListener("click",toggleNightmodeOnClick);let dragged=!1;const gridSquares=document.querySelectorAll(".day");function gridStartHandler(e){startDay=e.target.dataset.index,document.querySelectorAll(".today").forEach(function(e,t){e.classList.toggle("today")}),document.querySelectorAll(".select").forEach(function(e,t){e.classList.toggle("select")}),e.target.classList.toggle("today"),dragged=!0}function gridEndHandler(e){e.preventDefault(),endDay=e.target.dataset.index,dragged=!1,startDay>endDay?load(endDay,startDay):load(startDay,endDay)}function gridHoverHandler(e){dragged&&gridSquares.forEach(function(t,n){t.classList.remove("select"),parseInt(startDay)>parseInt(e.target.dataset.index)?parseInt(t.dataset.index)<=parseInt(startDay)&&parseInt(t.dataset.index)>=parseInt(e.target.dataset.index)&&t.classList.add("select"):parseInt(t.dataset.index)>=parseInt(startDay)&&parseInt(t.dataset.index)<=parseInt(e.target.dataset.index)&&t.classList.add("select")})}function removeSpinnerIfPresent(){const e=document.querySelector(".spinner");null!==e&&e.remove()}function removeNotificationIfPresent(){const e=document.querySelector(".notification");null!==e&&e.remove()}function load(e,t){const n={userId:userId,year:year,startDay:e,endDay:t};profile.innerHTML="",removeNotificationIfPresent(),removeSpinnerIfPresent();const d=document.createElement("span");d.classList.add("spinner"),profile.appendChild(d);const a=new XMLHttpRequest;a.open("POST","/api/getData",!0),a.setRequestHeader("Content-Type","application/json; charset=UTF-8"),a.send(JSON.stringify(n)),a.onreadystatechange=function(){4===a.readyState&&200===a.status&&updateProfile(JSON.parse(a.responseText))}}gridSquares.length>0&&gridSquares.forEach(function(e,t){["mousedown","touchstart"].forEach(function(t){e.addEventListener(t,gridStartHandler)}),["mouseup","touchend"].forEach(function(t){e.addEventListener(t,gridEndHandler)}),["mouseenter","touchenter"].forEach(function(t){e.addEventListener(t,gridHoverHandler)})}),getUserId(),getYear(),turnOnNightmodeOnPageLoad();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,