const profile=document.querySelector(".profile");let userId=null,year=null;function getUserId(){const e=document.querySelector(".current h1");null!==e&&(userId=e.dataset.id)}function getYear(){const e=document.querySelector(".yearHeader");null!==e&&(year=e.dataset.year)}function updateProfile(e){if(console.table(e),removeSpinnerIfPresent(),null!==e.logs||0!==e.events.length)null!==e.logs&&printLogs(e.logs),0!==e.events.length&&printEvents(e.events);else{const e=createNotification();profile.appendChild(e)}}function printLogs(e){const t=document.createElement("section");t.classList.add("table");const n=document.createElement("table"),d=document.createElement("thead"),a=document.createElement("tr"),o=document.createElement("th");o.classList.add("icon");const c=document.createElement("th");c.appendChild(document.createTextNode("Level")),c.classList.add("level");const s=document.createElement("th");s.appendChild(document.createTextNode("Experience"));const i=document.createElement("th");i.appendChild(document.createTextNode("Difference"));const r=document.createElement("tbody");profile.appendChild(t),t.appendChild(n),n.appendChild(d),a.appendChild(o),a.appendChild(c),a.appendChild(s),a.appendChild(i),d.appendChild(a),n.appendChild(r),e.forEach(function(e,t){const n=document.createElement("tr"),d=document.createElement("td"),a=document.createElement("span");a.classList.add("log-icon","s"+t),d.appendChild(a);const o=document.createElement("td");o.appendChild(document.createTextNode(e.level));const c=document.createElement("td");c.appendChild(document.createTextNode(Math.round(e.value).toLocaleString()));const s=document.createElement("td");e.difference>0?(s.appendChild(document.createTextNode("+"+Math.round(e.difference).toLocaleString())),s.classList.add("log-value","positive")):s.appendChild(document.createTextNode("0")),n.appendChild(d),n.appendChild(o),n.appendChild(c),n.appendChild(s),r.appendChild(n)})}function printEvents(e){const t=document.createElement("section");t.classList.add("events");const n=document.createElement("ul");n.classList.add("events"),profile.appendChild(t),t.appendChild(n),e.forEach(function(e,t){const d=document.createElement("li");d.classList.add("event-item");const a=document.createElement("div");a.classList.add("event-header");const o=document.createElement("h2");o.appendChild(document.createTextNode(e.title)),o.classList.add("event-title");const c=document.createElement("span");c.appendChild(document.createTextNode(dayjs.unix(e.timestamp).format("MMMM D, YYYY HH:mm"))),c.classList.add("event-timestamp");const s=document.createElement("p");s.appendChild(document.createTextNode(e.details)),s.classList.add("event-details"),d.appendChild(a),a.appendChild(o),a.appendChild(c),d.appendChild(s),n.appendChild(d)})}function createNotification(){const e=document.createElement("div");e.classList.add("text","notification","inf");const t=document.createElement("h2");t.appendChild(document.createTextNode("Nothing interesting happened."));const n=document.createElement("p");return n.appendChild(document.createTextNode("Looks like we don't have any data for you on this day.")),e.appendChild(t),e.appendChild(n),e}const body=document.querySelector("body");let isNightmode=body.classList.contains("is-nightmode");const nightmodeToggle=document.querySelector(".night-mode-toggle");function toggleNightmodeOnClick(e){e.preventDefault(),isNightmode=!(isNightmode=body.classList.contains("is-nightmode")),body.classList.toggle("is-nightmode"),localStorage.setItem("nightmode",JSON.stringify(isNightmode))}function turnOnNightmodeOnPageLoad(){"true"===localStorage.getItem("nightmode")&&body.classList.toggle("is-nightmode")}let startDay,endDay;null!==nightmodeToggle&&nightmodeToggle.addEventListener("click",toggleNightmodeOnClick);let dragged=!1;const gridSquares=document.querySelectorAll(".day");function gridStartHandler(e){startDay=e.target.dataset.index,document.querySelectorAll(".today").forEach(function(e,t){e.classList.toggle("today")}),document.querySelectorAll(".select").forEach(function(e,t){e.classList.toggle("select")}),e.target.classList.toggle("today"),dragged=!0}function gridEndHandler(e){e.preventDefault(),endDay=e.target.dataset.index,dragged=!1,startDay>endDay?load(endDay,startDay):load(startDay,endDay)}function gridHoverHandler(e){dragged&&gridSquares.forEach(function(t,n){t.classList.remove("select"),parseInt(startDay)>parseInt(e.target.dataset.index)?parseInt(t.dataset.index)<=parseInt(startDay)&&parseInt(t.dataset.index)>=parseInt(e.target.dataset.index)&&t.classList.add("select"):parseInt(t.dataset.index)>=parseInt(startDay)&&parseInt(t.dataset.index)<=parseInt(e.target.dataset.index)&&t.classList.add("select")})}function removeSpinnerIfPresent(){const e=document.querySelector(".spinner");null!==e&&e.remove()}function removeNotificationIfPresent(){const e=document.querySelector(".notification");null!==e&&e.remove()}function load(e,t){const n={userId:userId,year:year,startDay:e,endDay:t};profile.innerHTML="",removeNotificationIfPresent(),removeSpinnerIfPresent();const d=document.createElement("span");d.classList.add("spinner"),profile.appendChild(d);const a=new XMLHttpRequest;a.open("POST","/api/getData",!0),a.setRequestHeader("Content-Type","application/json; charset=UTF-8"),a.send(JSON.stringify(n)),a.onreadystatechange=function(){4===a.readyState&&200===a.status&&updateProfile(JSON.parse(a.responseText))}}gridSquares.length>0&&gridSquares.forEach(function(e,t){["mousedown","touchstart"].forEach(function(t){e.addEventListener(t,gridStartHandler)}),["mouseup","touchend"].forEach(function(t){e.addEventListener(t,gridEndHandler)}),["mouseenter","touchenter"].forEach(function(t){e.addEventListener(t,gridHoverHandler)})}),getUserId(),getYear(),turnOnNightmodeOnPageLoad();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6WyJwcm9maWxlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwidXNlcklkIiwieWVhciIsImdldFVzZXJJZCIsInVzZXJIZWFkZXIiLCJkYXRhc2V0IiwiaWQiLCJnZXRZZWFyIiwieWVhckhlYWRlciIsInVwZGF0ZVByb2ZpbGUiLCJkYXRhIiwiY29uc29sZSIsInRhYmxlIiwicmVtb3ZlU3Bpbm5lcklmUHJlc2VudCIsImxvZ3MiLCJldmVudHMiLCJsZW5ndGgiLCJwcmludExvZ3MiLCJwcmludEV2ZW50cyIsIm5vdGlmaWNhdGlvbiIsImNyZWF0ZU5vdGlmaWNhdGlvbiIsImFwcGVuZENoaWxkIiwibG9nU2VjdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJsb2dUYWJsZSIsImxvZ0hlYWRlciIsImxvZ0hlYWRlclJvdyIsImxvZ0hlYWRlckljb24iLCJsb2dIZWFkZXJMZXZlbCIsImNyZWF0ZVRleHROb2RlIiwibG9nSGVhZGVyRXhwZXJpZW5jZSIsImxvZ0hlYWRlckRpZmZlcmVuY2UiLCJsb2dUYWJsZUJvZHkiLCJmb3JFYWNoIiwibG9nIiwiaW5kZXgiLCJsb2dSb3ciLCJsb2dJY29uQ2VsbCIsImxvZ0ljb24iLCJsb2dMZXZlbCIsImxldmVsIiwibG9nVmFsdWUiLCJNYXRoIiwicm91bmQiLCJ2YWx1ZSIsInRvTG9jYWxlU3RyaW5nIiwibG9nRGlmZmVyZW5jZSIsImRpZmZlcmVuY2UiLCJldmVudFNlY3Rpb24iLCJldmVudExpc3QiLCJldmVudCIsImV2ZW50SXRlbSIsImV2ZW50SGVhZGVyIiwiZXZlbnRUaXRsZSIsInRpdGxlIiwiZXZlbnRUaW1lc3RhbXAiLCJkYXlqcyIsInVuaXgiLCJ0aW1lc3RhbXAiLCJmb3JtYXQiLCJldmVudERldGFpbHMiLCJkZXRhaWxzIiwibm90aWZpY2F0aW9uVGl0bGUiLCJub3RpZmljYXRpb25UZXh0IiwiYm9keSIsImlzTmlnaHRtb2RlIiwiY29udGFpbnMiLCJuaWdodG1vZGVUb2dnbGUiLCJ0b2dnbGVOaWdodG1vZGVPbkNsaWNrIiwiZSIsInByZXZlbnREZWZhdWx0IiwidG9nZ2xlIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0dXJuT25OaWdodG1vZGVPblBhZ2VMb2FkIiwiZ2V0SXRlbSIsInN0YXJ0RGF5IiwiZW5kRGF5IiwiYWRkRXZlbnRMaXN0ZW5lciIsImRyYWdnZWQiLCJncmlkU3F1YXJlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJncmlkU3RhcnRIYW5kbGVyIiwidGFyZ2V0Iiwic3F1YXJlIiwiZ3JpZEVuZEhhbmRsZXIiLCJsb2FkIiwiZ3JpZEhvdmVySGFuZGxlciIsInJlbW92ZSIsInBhcnNlSW50Iiwic3Bpbm5lciIsInJlbW92ZU5vdGlmaWNhdGlvbklmUHJlc2VudCIsImlubmVySFRNTCIsIm5ld1NwaW5uZXIiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJwYXJzZSIsInJlc3BvbnNlVGV4dCJdLCJtYXBwaW5ncyI6IkFBWUEsTUFBTUEsUUFBVUMsU0FBU0MsY0FBYyxZQUN2QyxJQUFJQyxPQUFTLEtBQ1RDLEtBQU8sS0FFWCxTQUFTQyxZQUNMLE1BQU1DLEVBQWFMLFNBQVNDLGNBQWMsZUFDdkIsT0FBZkksSUFDQUgsT0FBU0csRUFBV0MsUUFBUUMsSUFJcEMsU0FBU0MsVUFDTCxNQUFNQyxFQUFhVCxTQUFTQyxjQUFjLGVBQ3ZCLE9BQWZRLElBQ0FOLEtBQU9NLEVBQVdILFFBQVFILE1BSWxDLFNBQVNPLGNBQWNDLEdBS25CLEdBSEFDLFFBQVFDLE1BQU1GLEdBQ2RHLHlCQUVtQixPQUFmSCxFQUFLSSxNQUEwQyxJQUF4QkosRUFBS0ssT0FBT0MsT0FNcEIsT0FBZk4sRUFBS0ksTUFDTEcsVUFBVVAsRUFBS0ksTUFHUyxJQUF4QkosRUFBS0ssT0FBT0MsUUFDWkUsWUFBWVIsRUFBS0ssWUFYckIsQ0FDSSxNQUFNSSxFQUFlQyxxQkFDckJ0QixRQUFRdUIsWUFBWUYsSUFhNUIsU0FBU0YsVUFBVUgsR0FHZixNQUFNUSxFQUFhdkIsU0FBU3dCLGNBQWMsV0FDMUNELEVBQVdFLFVBQVVDLElBQUksU0FFekIsTUFBTUMsRUFBVzNCLFNBQVN3QixjQUFjLFNBQ2xDSSxFQUFZNUIsU0FBU3dCLGNBQWMsU0FFbkNLLEVBQWU3QixTQUFTd0IsY0FBYyxNQUV0Q00sRUFBZ0I5QixTQUFTd0IsY0FBYyxNQUM3Q00sRUFBY0wsVUFBVUMsSUFBSSxRQUU1QixNQUFNSyxFQUFpQi9CLFNBQVN3QixjQUFjLE1BQzlDTyxFQUFlVCxZQUFZdEIsU0FBU2dDLGVBQWUsVUFDbkRELEVBQWVOLFVBQVVDLElBQUksU0FFN0IsTUFBTU8sRUFBc0JqQyxTQUFTd0IsY0FBYyxNQUNuRFMsRUFBb0JYLFlBQVl0QixTQUFTZ0MsZUFBZSxlQUV4RCxNQUFNRSxFQUFzQmxDLFNBQVN3QixjQUFjLE1BQ25EVSxFQUFvQlosWUFBWXRCLFNBQVNnQyxlQUFlLGVBRXhELE1BQU1HLEVBQWVuQyxTQUFTd0IsY0FBYyxTQUU1Q3pCLFFBQVF1QixZQUFZQyxHQUNwQkEsRUFBV0QsWUFBWUssR0FDdkJBLEVBQVNMLFlBQVlNLEdBRXJCQyxFQUFhUCxZQUFZUSxHQUN6QkQsRUFBYVAsWUFBWVMsR0FDekJGLEVBQWFQLFlBQVlXLEdBQ3pCSixFQUFhUCxZQUFZWSxHQUV6Qk4sRUFBVU4sWUFBWU8sR0FFdEJGLEVBQVNMLFlBQVlhLEdBR3JCcEIsRUFBS3FCLFFBQVEsU0FBVUMsRUFBS0MsR0FDeEIsTUFBTUMsRUFBU3ZDLFNBQVN3QixjQUFjLE1BRWhDZ0IsRUFBY3hDLFNBQVN3QixjQUFjLE1BQ3JDaUIsRUFBVXpDLFNBQVN3QixjQUFjLFFBQ3ZDaUIsRUFBUWhCLFVBQVVDLElBQUksV0FBWSxJQUFNWSxHQUN4Q0UsRUFBWWxCLFlBQVltQixHQUV4QixNQUFNQyxFQUFXMUMsU0FBU3dCLGNBQWMsTUFDeENrQixFQUFTcEIsWUFBWXRCLFNBQVNnQyxlQUFlSyxFQUFJTSxRQUVqRCxNQUFNQyxFQUFXNUMsU0FBU3dCLGNBQWMsTUFDeENvQixFQUFTdEIsWUFBWXRCLFNBQVNnQyxlQUFlYSxLQUFLQyxNQUFNVCxFQUFJVSxPQUFPQyxtQkFFbkUsTUFBTUMsRUFBZ0JqRCxTQUFTd0IsY0FBYyxNQUN6Q2EsRUFBSWEsV0FBYSxHQUNqQkQsRUFBYzNCLFlBQVl0QixTQUFTZ0MsZUFBZSxJQUFNYSxLQUFLQyxNQUFNVCxFQUFJYSxZQUFZRixtQkFDbkZDLEVBQWN4QixVQUFVQyxJQUFJLFlBQWEsYUFFekN1QixFQUFjM0IsWUFBWXRCLFNBQVNnQyxlQUFlLE1BR3RETyxFQUFPakIsWUFBWWtCLEdBQ25CRCxFQUFPakIsWUFBWW9CLEdBQ25CSCxFQUFPakIsWUFBWXNCLEdBQ25CTCxFQUFPakIsWUFBWTJCLEdBQ25CZCxFQUFhYixZQUFZaUIsS0FJakMsU0FBU3BCLFlBQVlILEdBRWpCLE1BQU1tQyxFQUFlbkQsU0FBU3dCLGNBQWMsV0FDNUMyQixFQUFhMUIsVUFBVUMsSUFBSSxVQUUzQixNQUFNMEIsRUFBWXBELFNBQVN3QixjQUFjLE1BQ3pDNEIsRUFBVTNCLFVBQVVDLElBQUksVUFFeEIzQixRQUFRdUIsWUFBWTZCLEdBQ3BCQSxFQUFhN0IsWUFBWThCLEdBRXpCcEMsRUFBT29CLFFBQVEsU0FBVWlCLEVBQU9mLEdBRTVCLE1BQU1nQixFQUFZdEQsU0FBU3dCLGNBQWMsTUFDekM4QixFQUFVN0IsVUFBVUMsSUFBSSxjQUV4QixNQUFNNkIsRUFBY3ZELFNBQVN3QixjQUFjLE9BQzNDK0IsRUFBWTlCLFVBQVVDLElBQUksZ0JBRTFCLE1BQU04QixFQUFheEQsU0FBU3dCLGNBQWMsTUFDMUNnQyxFQUFXbEMsWUFBWXRCLFNBQVNnQyxlQUFlcUIsRUFBTUksUUFDckRELEVBQVcvQixVQUFVQyxJQUFJLGVBRXpCLE1BQU1nQyxFQUFpQjFELFNBQVN3QixjQUFjLFFBQzlDa0MsRUFBZXBDLFlBQVl0QixTQUFTZ0MsZUFBZTJCLE1BQU1DLEtBQUtQLEVBQU1RLFdBQVdDLE9BQU8sd0JBQ3RGSixFQUFlakMsVUFBVUMsSUFBSSxtQkFFN0IsTUFBTXFDLEVBQWUvRCxTQUFTd0IsY0FBYyxLQUM1Q3VDLEVBQWF6QyxZQUFZdEIsU0FBU2dDLGVBQWVxQixFQUFNVyxVQUN2REQsRUFBYXRDLFVBQVVDLElBQUksaUJBRTNCNEIsRUFBVWhDLFlBQVlpQyxHQUN0QkEsRUFBWWpDLFlBQVlrQyxHQUN4QkQsRUFBWWpDLFlBQVlvQyxHQUN4QkosRUFBVWhDLFlBQVl5QyxHQUV0QlgsRUFBVTlCLFlBQVlnQyxLQUk5QixTQUFTakMscUJBRUwsTUFBTUQsRUFBZXBCLFNBQVN3QixjQUFjLE9BQzVDSixFQUFhSyxVQUFVQyxJQUFJLE9BQVEsZUFBZ0IsT0FFbkQsTUFBTXVDLEVBQW9CakUsU0FBU3dCLGNBQWMsTUFDakR5QyxFQUFrQjNDLFlBQVl0QixTQUFTZ0MsZUFBZSxrQ0FFdEQsTUFBTWtDLEVBQW1CbEUsU0FBU3dCLGNBQWMsS0FLaEQsT0FKQTBDLEVBQWlCNUMsWUFBWXRCLFNBQVNnQyxlQUFlLDJEQUVyRFosRUFBYUUsWUFBWTJDLEdBQ3pCN0MsRUFBYUUsWUFBWTRDLEdBQ2xCOUMsRUFLWCxNQUFNK0MsS0FBT25FLFNBQVNDLGNBQWMsUUFDcEMsSUFBSW1FLFlBQWNELEtBQUsxQyxVQUFVNEMsU0FBUyxnQkFDMUMsTUFBTUMsZ0JBQWtCdEUsU0FBU0MsY0FBYyxzQkFFL0MsU0FBU3NFLHVCQUF1QkMsR0FDNUJBLEVBQUVDLGlCQUlGTCxjQURBQSxZQUFjRCxLQUFLMUMsVUFBVTRDLFNBQVMsaUJBSXRDRixLQUFLMUMsVUFBVWlELE9BQU8sZ0JBR3RCQyxhQUFhQyxRQUFRLFlBQWFDLEtBQUtDLFVBQVVWLGNBT3JELFNBQVNXLDRCQUNxQyxTQUF0Q0osYUFBYUssUUFBUSxjQUNyQmIsS0FBSzFDLFVBQVVpRCxPQUFPLGdCQVM5QixJQUFJTyxTQUFVQyxPQUxVLE9BQXBCWixpQkFDQUEsZ0JBQWdCYSxpQkFBaUIsUUFBU1osd0JBSzlDLElBQUlhLFNBQVUsRUFHZCxNQUFNQyxZQUFjckYsU0FBU3NGLGlCQUFpQixRQXNCOUMsU0FBU0MsaUJBQWlCZixHQUN0QlMsU0FBV1QsRUFBRWdCLE9BQU9sRixRQUFRZ0MsTUFFYnRDLFNBQVNzRixpQkFBaUIsVUFDbENsRCxRQUFRLFNBQVVxRCxFQUFRbkQsR0FDN0JtRCxFQUFPaEUsVUFBVWlELE9BQU8sV0FFWDFFLFNBQVNzRixpQkFBaUIsV0FDbENsRCxRQUFRLFNBQVVxRCxFQUFRbkQsR0FDL0JtRCxFQUFPaEUsVUFBVWlELE9BQU8sWUFFNUJGLEVBQUVnQixPQUFPL0QsVUFBVWlELE9BQU8sU0FDMUJVLFNBQVUsRUFHZCxTQUFTTSxlQUFlbEIsR0FDcEJBLEVBQUVDLGlCQUNGUyxPQUFTVixFQUFFZ0IsT0FBT2xGLFFBQVFnQyxNQUMxQjhDLFNBQVUsRUFDTkgsU0FBV0MsT0FDWFMsS0FBS1QsT0FBUUQsVUFFYlUsS0FBS1YsU0FBVUMsUUFJdkIsU0FBU1UsaUJBQWlCcEIsR0FDbEJZLFNBQ0FDLFlBQVlqRCxRQUFRLFNBQVVxRCxFQUFRbkQsR0FFbENtRCxFQUFPaEUsVUFBVW9FLE9BQU8sVUFFcEJDLFNBQVNiLFVBQVlhLFNBQVN0QixFQUFFZ0IsT0FBT2xGLFFBQVFnQyxPQUMzQ3dELFNBQVNMLEVBQU9uRixRQUFRZ0MsUUFBVXdELFNBQVNiLFdBQWFhLFNBQVNMLEVBQU9uRixRQUFRZ0MsUUFBVXdELFNBQVN0QixFQUFFZ0IsT0FBT2xGLFFBQVFnQyxRQUNwSG1ELEVBQU9oRSxVQUFVQyxJQUFJLFVBSXJCb0UsU0FBU0wsRUFBT25GLFFBQVFnQyxRQUFVd0QsU0FBU2IsV0FBYWEsU0FBU0wsRUFBT25GLFFBQVFnQyxRQUFVd0QsU0FBU3RCLEVBQUVnQixPQUFPbEYsUUFBUWdDLFFBQ3BIbUQsRUFBT2hFLFVBQVVDLElBQUksWUFPekMsU0FBU1oseUJBQ0wsTUFBTWlGLEVBQVUvRixTQUFTQyxjQUFjLFlBQ3ZCLE9BQVo4RixHQUNBQSxFQUFRRixTQUloQixTQUFTRyw4QkFDTCxNQUFNNUUsRUFBZXBCLFNBQVNDLGNBQWMsaUJBQ3ZCLE9BQWpCbUIsR0FDQUEsRUFBYXlFLFNBSXJCLFNBQVNGLEtBQUtWLEVBQVVDLEdBR3BCLE1BQU12RSxFQUFPLENBQ1RULE9BQVFBLE9BQ1JDLEtBQU1BLEtBQ044RSxTQUFVQSxFQUNWQyxPQUFRQSxHQUlabkYsUUFBUWtHLFVBQVksR0FDcEJELDhCQUNBbEYseUJBR0EsTUFBTW9GLEVBQWFsRyxTQUFTd0IsY0FBYyxRQUMxQzBFLEVBQVd6RSxVQUFVQyxJQUFJLFdBQ3pCM0IsUUFBUXVCLFlBQVk0RSxHQUdwQixNQUFNQyxFQUFNLElBQUlDLGVBQ2hCRCxFQUFJRSxLQUFLLE9BQVEsZ0JBQWdCLEdBQ2pDRixFQUFJRyxpQkFBaUIsZUFBZ0IsbUNBQ3JDSCxFQUFJSSxLQUFLMUIsS0FBS0MsVUFBVW5FLElBQ3hCd0YsRUFBSUssbUJBQXFCLFdBQ0UsSUFBbkJMLEVBQUlNLFlBQW1DLE1BQWZOLEVBQUlPLFFBQzVCaEcsY0FBY21FLEtBQUs4QixNQUFNUixFQUFJUyxnQkExR3JDdkIsWUFBWXBFLE9BQVMsR0FFckJvRSxZQUFZakQsUUFBUSxTQUFVcUQsRUFBUW5ELEdBRWxDLENBQUMsWUFBYSxjQUFjRixRQUFRLFNBQVVvQyxHQUMxQ2lCLEVBQU9OLGlCQUFpQlgsRUFBR2Usb0JBRy9CLENBQUMsVUFBVyxZQUFZbkQsUUFBUSxTQUFVb0MsR0FDdENpQixFQUFPTixpQkFBaUJYLEVBQUdrQixrQkFHL0IsQ0FBQyxhQUFjLGNBQWN0RCxRQUFRLFNBQVVvQyxHQUMzQ2lCLEVBQU9OLGlCQUFpQlgsRUFBR29CLHNCQTBHdkN4RixZQUNBSSxVQUNBdUUiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogUnVuZWxvZ3Mgc2NyaXB0LmpzXG4gKlxuICogQ29udGVudDpcbiAqICAtIEdldCB1c2VySWQgYW5kIGN1cnJlbnQgeWVhciBmcm9tIHRoZSBhcHByb3ByaWF0ZSBoZWFkZXJzXG4gKiAgLSBHcmlkIHNxdWFyZSBjbGljayBldmVudCAtPiBYaFIgcmVxdWVzdCBuYWFyIEFQSSAtPiB1cGRhdGUgcHJvZmlsZVxuICogIC0gTmlnaHRtb2RlIHRvZ2dsZSAod29ya3Mgd2l0aCBsb2NhbFN0b3JhZ2UpXG4gKiAgLSBHcmlkIGRyYWcgLT4gc2VsZWN0IHNxdWFyZXNcbiAqICAtIFByaW50IGEgdGFibGUgd2l0aCByb3dzIGZvciBleHAgb3IgYW4gdW5vcmRlbmVkIGxvc3QgZm9yIGV2ZW50c1xuICpcbiAqL1xuXG5jb25zdCBwcm9maWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGUnKTtcbmxldCB1c2VySWQgPSBudWxsO1xubGV0IHllYXIgPSBudWxsO1xuXG5mdW5jdGlvbiBnZXRVc2VySWQoKSB7XG4gICAgY29uc3QgdXNlckhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jdXJyZW50IGgxJyk7XG4gICAgaWYgKHVzZXJIZWFkZXIgIT09IG51bGwpIHtcbiAgICAgICAgdXNlcklkID0gdXNlckhlYWRlci5kYXRhc2V0LmlkO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0WWVhcigpIHtcbiAgICBjb25zdCB5ZWFySGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnllYXJIZWFkZXInKTtcbiAgICBpZiAoeWVhckhlYWRlciAhPT0gbnVsbCkge1xuICAgICAgICB5ZWFyID0geWVhckhlYWRlci5kYXRhc2V0LnllYXI7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVQcm9maWxlKGRhdGEpXG57XG4gICAgY29uc29sZS50YWJsZShkYXRhKTtcbiAgICByZW1vdmVTcGlubmVySWZQcmVzZW50KCk7XG5cbiAgICBpZiAoZGF0YS5sb2dzICA9PT0gbnVsbCAmJiBkYXRhLmV2ZW50cy5sZW5ndGggID09PSAwKSB7XG4gICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbiA9IGNyZWF0ZU5vdGlmaWNhdGlvbigpO1xuICAgICAgICBwcm9maWxlLmFwcGVuZENoaWxkKG5vdGlmaWNhdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5sb2dzICAhPT0gbnVsbCkge1xuICAgICAgICBwcmludExvZ3MoZGF0YS5sb2dzKTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5ldmVudHMubGVuZ3RoICAhPT0gMCkge1xuICAgICAgICBwcmludEV2ZW50cyhkYXRhLmV2ZW50cyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwcmludExvZ3MobG9ncylcbntcbiAgICAvLyBQcmludCB0aGUgZXhwZXJpZW5jZSB0YWJsZSBhbmQgaGVhZGVyXG4gICAgY29uc3QgbG9nU2VjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlY3Rpb24nKTtcbiAgICBsb2dTZWN0aW9uLmNsYXNzTGlzdC5hZGQoJ3RhYmxlJyk7XG5cbiAgICBjb25zdCBsb2dUYWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyk7XG4gICAgY29uc3QgbG9nSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGhlYWQnKTtcblxuICAgIGNvbnN0IGxvZ0hlYWRlclJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG5cbiAgICBjb25zdCBsb2dIZWFkZXJJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGgnKTtcbiAgICBsb2dIZWFkZXJJY29uLmNsYXNzTGlzdC5hZGQoJ2ljb24nKTtcblxuICAgIGNvbnN0IGxvZ0hlYWRlckxldmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGgnKTtcbiAgICBsb2dIZWFkZXJMZXZlbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnTGV2ZWwnKSk7XG4gICAgbG9nSGVhZGVyTGV2ZWwuY2xhc3NMaXN0LmFkZCgnbGV2ZWwnKTtcblxuICAgIGNvbnN0IGxvZ0hlYWRlckV4cGVyaWVuY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aCcpO1xuICAgIGxvZ0hlYWRlckV4cGVyaWVuY2UuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ0V4cGVyaWVuY2UnKSk7XG5cbiAgICBjb25zdCBsb2dIZWFkZXJEaWZmZXJlbmNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGgnKTtcbiAgICBsb2dIZWFkZXJEaWZmZXJlbmNlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdEaWZmZXJlbmNlJykpO1xuXG4gICAgY29uc3QgbG9nVGFibGVCb2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGJvZHknKTtcblxuICAgIHByb2ZpbGUuYXBwZW5kQ2hpbGQobG9nU2VjdGlvbik7XG4gICAgbG9nU2VjdGlvbi5hcHBlbmRDaGlsZChsb2dUYWJsZSk7XG4gICAgbG9nVGFibGUuYXBwZW5kQ2hpbGQobG9nSGVhZGVyKTtcblxuICAgIGxvZ0hlYWRlclJvdy5hcHBlbmRDaGlsZChsb2dIZWFkZXJJY29uKTtcbiAgICBsb2dIZWFkZXJSb3cuYXBwZW5kQ2hpbGQobG9nSGVhZGVyTGV2ZWwpO1xuICAgIGxvZ0hlYWRlclJvdy5hcHBlbmRDaGlsZChsb2dIZWFkZXJFeHBlcmllbmNlKTtcbiAgICBsb2dIZWFkZXJSb3cuYXBwZW5kQ2hpbGQobG9nSGVhZGVyRGlmZmVyZW5jZSk7XG5cbiAgICBsb2dIZWFkZXIuYXBwZW5kQ2hpbGQobG9nSGVhZGVyUm93KTtcblxuICAgIGxvZ1RhYmxlLmFwcGVuZENoaWxkKGxvZ1RhYmxlQm9keSk7XG5cbiAgICAvKiBEaXNwbGF5IHRoZSBleHBlcmllbmNlIHRhYmxlIHJvd3MgKi9cbiAgICBsb2dzLmZvckVhY2goZnVuY3Rpb24gKGxvZywgaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbG9nUm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcblxuICAgICAgICBjb25zdCBsb2dJY29uQ2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICAgIGNvbnN0IGxvZ0ljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgIGxvZ0ljb24uY2xhc3NMaXN0LmFkZCgnbG9nLWljb24nLCAncycgKyBpbmRleCk7XG4gICAgICAgIGxvZ0ljb25DZWxsLmFwcGVuZENoaWxkKGxvZ0ljb24pO1xuXG4gICAgICAgIGNvbnN0IGxvZ0xldmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgbG9nTGV2ZWwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobG9nLmxldmVsKSk7XG5cbiAgICAgICAgY29uc3QgbG9nVmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICBsb2dWYWx1ZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShNYXRoLnJvdW5kKGxvZy52YWx1ZSkudG9Mb2NhbGVTdHJpbmcoKSkpO1xuXG4gICAgICAgIGNvbnN0IGxvZ0RpZmZlcmVuY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICBpZiAobG9nLmRpZmZlcmVuY2UgPiAwKSB7XG4gICAgICAgICAgICBsb2dEaWZmZXJlbmNlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcrJyArIE1hdGgucm91bmQobG9nLmRpZmZlcmVuY2UpLnRvTG9jYWxlU3RyaW5nKCkpKTtcbiAgICAgICAgICAgIGxvZ0RpZmZlcmVuY2UuY2xhc3NMaXN0LmFkZCgnbG9nLXZhbHVlJywgJ3Bvc2l0aXZlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb2dEaWZmZXJlbmNlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcwJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgbG9nUm93LmFwcGVuZENoaWxkKGxvZ0ljb25DZWxsKTtcbiAgICAgICAgbG9nUm93LmFwcGVuZENoaWxkKGxvZ0xldmVsKTtcbiAgICAgICAgbG9nUm93LmFwcGVuZENoaWxkKGxvZ1ZhbHVlKTtcbiAgICAgICAgbG9nUm93LmFwcGVuZENoaWxkKGxvZ0RpZmZlcmVuY2UpO1xuICAgICAgICBsb2dUYWJsZUJvZHkuYXBwZW5kQ2hpbGQobG9nUm93KTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gcHJpbnRFdmVudHMoZXZlbnRzKVxue1xuICAgIGNvbnN0IGV2ZW50U2VjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlY3Rpb24nKTtcbiAgICBldmVudFNlY3Rpb24uY2xhc3NMaXN0LmFkZCgnZXZlbnRzJyk7XG5cbiAgICBjb25zdCBldmVudExpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgIGV2ZW50TGlzdC5jbGFzc0xpc3QuYWRkKCdldmVudHMnKTtcblxuICAgIHByb2ZpbGUuYXBwZW5kQ2hpbGQoZXZlbnRTZWN0aW9uKTtcbiAgICBldmVudFNlY3Rpb24uYXBwZW5kQ2hpbGQoZXZlbnRMaXN0KTtcblxuICAgIGV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCwgaW5kZXgpIHtcblxuICAgICAgICBjb25zdCBldmVudEl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICBldmVudEl0ZW0uY2xhc3NMaXN0LmFkZCgnZXZlbnQtaXRlbScpO1xuXG4gICAgICAgIGNvbnN0IGV2ZW50SGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGV2ZW50SGVhZGVyLmNsYXNzTGlzdC5hZGQoJ2V2ZW50LWhlYWRlcicpO1xuXG4gICAgICAgIGNvbnN0IGV2ZW50VGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xuICAgICAgICBldmVudFRpdGxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGV2ZW50LnRpdGxlKSk7XG4gICAgICAgIGV2ZW50VGl0bGUuY2xhc3NMaXN0LmFkZCgnZXZlbnQtdGl0bGUnKTtcblxuICAgICAgICBjb25zdCBldmVudFRpbWVzdGFtcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgZXZlbnRUaW1lc3RhbXAuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZGF5anMudW5peChldmVudC50aW1lc3RhbXApLmZvcm1hdChcIk1NTU0gRCwgWVlZWSBISDptbVwiKSkpO1xuICAgICAgICBldmVudFRpbWVzdGFtcC5jbGFzc0xpc3QuYWRkKCdldmVudC10aW1lc3RhbXAnKTtcblxuICAgICAgICBjb25zdCBldmVudERldGFpbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgIGV2ZW50RGV0YWlscy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShldmVudC5kZXRhaWxzKSk7XG4gICAgICAgIGV2ZW50RGV0YWlscy5jbGFzc0xpc3QuYWRkKCdldmVudC1kZXRhaWxzJyk7XG5cbiAgICAgICAgZXZlbnRJdGVtLmFwcGVuZENoaWxkKGV2ZW50SGVhZGVyKTtcbiAgICAgICAgZXZlbnRIZWFkZXIuYXBwZW5kQ2hpbGQoZXZlbnRUaXRsZSk7XG4gICAgICAgIGV2ZW50SGVhZGVyLmFwcGVuZENoaWxkKGV2ZW50VGltZXN0YW1wKTtcbiAgICAgICAgZXZlbnRJdGVtLmFwcGVuZENoaWxkKGV2ZW50RGV0YWlscyk7XG5cbiAgICAgICAgZXZlbnRMaXN0LmFwcGVuZENoaWxkKGV2ZW50SXRlbSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU5vdGlmaWNhdGlvbigpXG57XG4gICAgY29uc3Qgbm90aWZpY2F0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbm90aWZpY2F0aW9uLmNsYXNzTGlzdC5hZGQoJ3RleHQnLCAnbm90aWZpY2F0aW9uJywgJ2luZicpO1xuXG4gICAgY29uc3Qgbm90aWZpY2F0aW9uVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xuICAgIG5vdGlmaWNhdGlvblRpdGxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiTm90aGluZyBpbnRlcmVzdGluZyBoYXBwZW5lZC5cIikpO1xuXG4gICAgY29uc3Qgbm90aWZpY2F0aW9uVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICBub3RpZmljYXRpb25UZXh0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiTG9va3MgbGlrZSB3ZSBkb24ndCBoYXZlIGFueSBkYXRhIGZvciB5b3Ugb24gdGhpcyBkYXkuXCIpKTtcblxuICAgIG5vdGlmaWNhdGlvbi5hcHBlbmRDaGlsZChub3RpZmljYXRpb25UaXRsZSk7XG4gICAgbm90aWZpY2F0aW9uLmFwcGVuZENoaWxkKG5vdGlmaWNhdGlvblRleHQpO1xuICAgIHJldHVybiBub3RpZmljYXRpb247XG59XG5cbi8qIE5pZ2h0bW9kZSB0b2dnbGUgKGdsb2JhbCkgKi9cblxuY29uc3QgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcbmxldCBpc05pZ2h0bW9kZSA9IGJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy1uaWdodG1vZGUnKTtcbmNvbnN0IG5pZ2h0bW9kZVRvZ2dsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uaWdodC1tb2RlLXRvZ2dsZScpO1xuXG5mdW5jdGlvbiB0b2dnbGVOaWdodG1vZGVPbkNsaWNrKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAvLyBHZXQgdGhlIGJvZHkgY2xhc3MgYW5kIHJldmVyc2UgaXRcbiAgICBpc05pZ2h0bW9kZSA9IGJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy1uaWdodG1vZGUnKTtcbiAgICBpc05pZ2h0bW9kZSA9ICFpc05pZ2h0bW9kZTtcblxuICAgIC8vIFNldCB0aGUgYm9keSBjbGFzcyBzbyB0aGF0IHRoZSBzdHlsaW5nIGNoYW5nZXNcbiAgICBib2R5LmNsYXNzTGlzdC50b2dnbGUoJ2lzLW5pZ2h0bW9kZScpO1xuXG4gICAgLy8gU3RvcmUgdGhlIGJvb2wgaW4gbG9jYWxTdG9yYWdlXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJuaWdodG1vZGVcIiwgSlNPTi5zdHJpbmdpZnkoaXNOaWdodG1vZGUpKTtcbn1cblxuLypcbiAqIElmIGEgcGFnZSBpcyBsb2FkZWQgYW5kIHRoZSBsb2NhbFN0b3JhZ2UgcGFyYW1ldGVyIGlzIHNldCB0b1xuICogdHJ1ZSwgdGhlbiBzd2l0Y2ggdGhlIHBhZ2Ugc3R5bGluZ1xuICovXG5mdW5jdGlvbiB0dXJuT25OaWdodG1vZGVPblBhZ2VMb2FkKCkge1xuICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIm5pZ2h0bW9kZVwiKSA9PT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgYm9keS5jbGFzc0xpc3QudG9nZ2xlKCdpcy1uaWdodG1vZGUnKTtcbiAgICB9XG59XG5cbmlmIChuaWdodG1vZGVUb2dnbGUgIT09IG51bGwpIHtcbiAgICBuaWdodG1vZGVUb2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVOaWdodG1vZGVPbkNsaWNrKTtcbn1cblxuLyogRGF0ZSBjbGlja2VyICovXG5sZXQgc3RhcnREYXksIGVuZERheTtcbmxldCBkcmFnZ2VkID0gZmFsc2U7XG5cbi8qIFNWRyBHcmlkIGV2ZW50cyAqL1xuY29uc3QgZ3JpZFNxdWFyZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZGF5Jyk7XG5cbi8vIHF1ZXJ5U2VsZWN0b3JBbGwgcmV0dXJucyBhIE5vZGVsaXN0IHNvIGhhdmUgdG8gY2hlY2sgZm9yIGxlbmd0aFxuaWYgKGdyaWRTcXVhcmVzLmxlbmd0aCA+IDApIHtcblxuICAgIGdyaWRTcXVhcmVzLmZvckVhY2goZnVuY3Rpb24gKHNxdWFyZSwgaW5kZXgpIHtcblxuICAgICAgICBbJ21vdXNlZG93bicsICd0b3VjaHN0YXJ0J10uZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgc3F1YXJlLmFkZEV2ZW50TGlzdGVuZXIoZSwgZ3JpZFN0YXJ0SGFuZGxlcik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIFsnbW91c2V1cCcsICd0b3VjaGVuZCddLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHNxdWFyZS5hZGRFdmVudExpc3RlbmVyKGUsIGdyaWRFbmRIYW5kbGVyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgWydtb3VzZWVudGVyJywgJ3RvdWNoZW50ZXInXS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBzcXVhcmUuYWRkRXZlbnRMaXN0ZW5lcihlLCBncmlkSG92ZXJIYW5kbGVyKTtcbiAgICAgICAgfSk7XG5cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ3JpZFN0YXJ0SGFuZGxlcihlKSB7XG4gICAgc3RhcnREYXkgPSBlLnRhcmdldC5kYXRhc2V0LmluZGV4O1xuXG4gICAgY29uc3QgYWN0aXZlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRvZGF5Jyk7XG4gICAgYWN0aXZlLmZvckVhY2goZnVuY3Rpb24gKHNxdWFyZSwgaW5kZXgpIHtcbiAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC50b2dnbGUoJ3RvZGF5Jyk7XG4gICAgfSlcbiAgICBjb25zdCBzZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWxlY3QnKTtcbiAgICBzZWxlY3RlZC5mb3JFYWNoKGZ1bmN0aW9uIChzcXVhcmUsIGluZGV4KSB7XG4gICAgICAgIHNxdWFyZS5jbGFzc0xpc3QudG9nZ2xlKCdzZWxlY3QnKTtcbiAgICB9KVxuICAgIGUudGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoJ3RvZGF5Jyk7XG4gICAgZHJhZ2dlZCA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIGdyaWRFbmRIYW5kbGVyKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZW5kRGF5ID0gZS50YXJnZXQuZGF0YXNldC5pbmRleDtcbiAgICBkcmFnZ2VkID0gZmFsc2U7XG4gICAgaWYgKHN0YXJ0RGF5ID4gZW5kRGF5KSB7XG4gICAgICAgIGxvYWQoZW5kRGF5LCBzdGFydERheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbG9hZChzdGFydERheSwgZW5kRGF5KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdyaWRIb3ZlckhhbmRsZXIoZSkge1xuICAgIGlmIChkcmFnZ2VkKSB7XG4gICAgICAgIGdyaWRTcXVhcmVzLmZvckVhY2goZnVuY3Rpb24gKHNxdWFyZSwgaW5kZXgpIHtcbiAgICAgICAgICAgIC8vcmVzZXRcbiAgICAgICAgICAgIHNxdWFyZS5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3QnKTtcbiAgICAgICAgICAgIC8vcmlnaHQgZHJhZ1xuICAgICAgICAgICAgaWYgKHBhcnNlSW50KHN0YXJ0RGF5KSA+IHBhcnNlSW50KGUudGFyZ2V0LmRhdGFzZXQuaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KHNxdWFyZS5kYXRhc2V0LmluZGV4KSA8PSBwYXJzZUludChzdGFydERheSkgJiYgcGFyc2VJbnQoc3F1YXJlLmRhdGFzZXQuaW5kZXgpID49IHBhcnNlSW50KGUudGFyZ2V0LmRhdGFzZXQuaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNxdWFyZS5jbGFzc0xpc3QuYWRkKCdzZWxlY3QnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vbGVmdCBkcmFnXG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KHNxdWFyZS5kYXRhc2V0LmluZGV4KSA+PSBwYXJzZUludChzdGFydERheSkgJiYgcGFyc2VJbnQoc3F1YXJlLmRhdGFzZXQuaW5kZXgpIDw9IHBhcnNlSW50KGUudGFyZ2V0LmRhdGFzZXQuaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNxdWFyZS5jbGFzc0xpc3QuYWRkKCdzZWxlY3QnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVTcGlubmVySWZQcmVzZW50KCkge1xuICAgIGNvbnN0IHNwaW5uZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3Bpbm5lcicpO1xuICAgIGlmIChzcGlubmVyICE9PSBudWxsKSB7XG4gICAgICAgIHNwaW5uZXIucmVtb3ZlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVOb3RpZmljYXRpb25JZlByZXNlbnQoKSB7XG4gICAgY29uc3Qgbm90aWZpY2F0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5vdGlmaWNhdGlvbicpO1xuICAgIGlmIChub3RpZmljYXRpb24gIT09IG51bGwpIHtcbiAgICAgICAgbm90aWZpY2F0aW9uLnJlbW92ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbG9hZChzdGFydERheSwgZW5kRGF5KSB7XG5cbiAgICAvLyAgUHJlcCB0aGUgZGF0YSB0aGF0IHRoZSBBUEkgbmVlZHNcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICB1c2VySWQ6IHVzZXJJZCxcbiAgICAgICAgeWVhcjogeWVhcixcbiAgICAgICAgc3RhcnREYXk6IHN0YXJ0RGF5LFxuICAgICAgICBlbmREYXk6IGVuZERheVxuICAgIH07XG5cbiAgICAvLyAgQ2xlYW4gdXAgdGhlIHByb2ZpbGUgc28gd2UgY2FuIHJlLWluc2VydCB0aGUgbmV3IGRhdGFcbiAgICBwcm9maWxlLmlubmVySFRNTCA9ICcnO1xuICAgIHJlbW92ZU5vdGlmaWNhdGlvbklmUHJlc2VudCgpO1xuICAgIHJlbW92ZVNwaW5uZXJJZlByZXNlbnQoKTtcblxuICAgIC8vICBBZGQgdGhlIGxvYWRpbmcgc3Bpbm5lclxuICAgIGNvbnN0IG5ld1NwaW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgbmV3U3Bpbm5lci5jbGFzc0xpc3QuYWRkKCdzcGlubmVyJyk7XG4gICAgcHJvZmlsZS5hcHBlbmRDaGlsZChuZXdTcGlubmVyKTtcblxuICAgIC8vICBTdGFydCB0aGUgcmVxdWVzdFxuICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHhoci5vcGVuKCdQT1NUJywgJy9hcGkvZ2V0RGF0YScsIHRydWUpO1xuICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtOCcpO1xuICAgIHhoci5zZW5kKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQgJiYgeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICB1cGRhdGVQcm9maWxlKEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKlxubGV0IGdyaWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ3JpZC1jb250YWluZXInKTtcbmlmKGdyaWQpe1xuICBsZXQgbWF4ID0gZ3JpZC5zY3JvbGxXaWR0aCAtIGdyaWQuY2xpZW50V2lkdGg7XG4gIGdyaWQuc2Nyb2xsTGVmdCA9IG1heDtcbn1cbiovXG5cbmdldFVzZXJJZCgpO1xuZ2V0WWVhcigpO1xudHVybk9uTmlnaHRtb2RlT25QYWdlTG9hZCgpOyJdfQ==